package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"go-gqlgen/constants"
	"go-gqlgen/graph/model"
	"go-gqlgen/logic"
)

// ImportDataFromExel is the resolver for the importDataFromExel field.
func (r *mutationResolver) ImportDataFromExel(ctx context.Context) (*model.ReportCreated, error) {
	response, err := logic.ImportDataFromExcel()
	if err != nil {
		return nil, err
	}
	return response, err
}

// AddReport is the resolver for the addReport field.
func (r *mutationResolver) AddReport(ctx context.Context, input model.AddReportInput) ([]*model.IncidentReport, error) {
	response, err := logic.AddIncidentReport(ctx, &input)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// UpdateReport is the resolver for the updateReport field.
func (r *mutationResolver) UpdateReport(ctx context.Context, input model.AddReportInput) (*model.ReportCreated, error) {
	response, err := logic.UpdateIncidentReport(ctx, &input)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// DeleteReport is the resolver for the deleteReport field.
func (r *mutationResolver) DeleteReport(ctx context.Context, id string) (*model.ReportCreated, error) {
	response, err := logic.DeleteIncidentReport(ctx, id)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// DeleteAllReports is the resolver for the deleteAllReports field.
func (r *mutationResolver) DeleteAllReports(ctx context.Context) (*model.ReportCreated, error) {
	response, err := logic.DeleteAllIncidentReports(ctx)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// GetIncidentReports is the resolver for the getIncidentReports field.
func (r *queryResolver) GetIncidentReports(ctx context.Context) ([]*model.IncidentReport, error) {
	report, err := logic.GetIncidentReport(ctx)
	if err != nil {
		return nil, fmt.Errorf(constants.FaieldToGetIncidentReport, err)
	}

	return report, nil
}

// GetIncidentReportByID is the resolver for the getIncidentReportById field.
func (r *queryResolver) GetIncidentReportByID(ctx context.Context, id string) (*model.IncidentReport, error) {
	report, err := logic.GetIncidentReportByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf(constants.FaieldToGetIncidentReport, err)
	}

	return report, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
